//https://www.youtube.com/watch?v=cjIswDCKgu0

const input= document.querySelector("input");
const defaultText = document.getElementById("default");
const debounceText = document.getElementById("debounce");
const throttleText = document.getElementById("throttle");


const updateDebounceText = debounce((text) => {
  debounceText.textContent=text;
});

const updateThrottleText =  throttle((text) => {
  throttleText.textContent = text;
});


input.addEventListener("input",e => {
  defaultText.textContent = e.target.value;
  updateDebounceText(e.target.value);
  updateThrottleText(e.target.value);
}); 

function debounce(cb,delay=1000){
   let timer;  
   return (...args) => {  
      clearTimeout(timer);  
      timer = setTimeout(() => {
        cb(...args);
      },delay);
   }  
}

//another debounce function
function debounceX(cb, delay=1000,runAtFirst = false){
  var timer = null;
  var debounced = function(...args) {
    var _self = this;

    clearTimeout(timer);
    
    if(runAtFirst === true){
      var exec = !timer;
      timer = setTimeout(funciton(){
        timer = null;
      },delay);
      if(exec) {
        cb.apply(_self,args);
      }
    } else {
      timer = setTimeout(function(){
        cb.apply(_self,args);
      },delay)
    }
  }

  debounced.remove = function(){
    clearTimeout(timer);
    timer = null;
  }
  
  return debounced;
}


//another throttle function
function throttleX(cb, delay = 1000) {
  var timer = null;
  var begin = Date.now();
  
  return function(...args){
    var _self = this;
    var cur = Date.now();
    
    clearTimeout(timer);
    
    if(cur - begin >= delay){
      cb.apply(_self, args);
      begin = cur;
    } else {
      timer = setTimeout(function(){
        cb.apply(_self, args);
        begin = cur;
      }, delay)
    }
  }
}




function throttle(cb,delay=1000){
  let shouldWait = false;
  let waitingArgs;
  const timeoutFun= () => {
    if(waitingArgs==null)
    {
      shouldWait=false;
    }
    else
    {
      cb(...waitingArgs);
      waitingArgs=null;
      setTimeout(timeoutFun,delay);
    }
  }
  
  
  return (...args) => {
 
    if(shouldWait) {
      waitingArgs =args;
      return;
    }
    
    cb(...args);
    shouldWait=true;
    
    setTimeout(timeoutFun, delay);          
  }
}
